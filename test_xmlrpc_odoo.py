#!/usr/bin/env python3
"""
Script para verificar la comunicaci√≥n XML-RPC con Odoo
"""

import xmlrpc.client
import sys
import traceback

def test_odoo_xmlrpc():
    """Prueba la conexi√≥n XML-RPC con Odoo paso a paso"""
    
    # Configuraci√≥n
    odoo_url = "http://localhost:8070"
    odoo_db = "manus_odoo-bd"
    odoo_username = "yo@mail.com"
    odoo_password = "admin"
    
    print("=== VERIFICACI√ìN DE COMUNICACI√ìN XML-RPC CON ODOO ===")
    print(f"URL: {odoo_url}")
    print(f"Base de datos: {odoo_db}")
    print(f"Usuario: {odoo_username}")
    print(f"Contrase√±a: {odoo_password}")
    print("\n" + "="*60)
    
    try:
        # Paso 1: Conectar al servicio common
        print("\n1. CONECTANDO AL SERVICIO COMMON...")
        common = xmlrpc.client.ServerProxy(f'{odoo_url}/xmlrpc/2/common')
        print("‚úì Conexi√≥n al servicio common establecida")
        
        # Paso 2: Obtener informaci√≥n de versi√≥n
        print("\n2. OBTENIENDO INFORMACI√ìN DE VERSI√ìN...")
        try:
            version_info = common.version()
            print(f"‚úì Informaci√≥n de versi√≥n obtenida:")
            print(f"  - Versi√≥n del servidor: {version_info.get('server_version', 'N/A')}")
            print(f"  - Versi√≥n del protocolo: {version_info.get('protocol_version', 'N/A')}")
            print(f"  - Serie de versi√≥n: {version_info.get('server_serie', 'N/A')}")
        except Exception as e:
            print(f"‚úó Error obteniendo versi√≥n: {e}")
            return False
        
        # Paso 3: Autenticaci√≥n
        print("\n3. AUTENTICANDO USUARIO...")
        try:
            uid = common.authenticate(odoo_db, odoo_username, odoo_password, {})
            if uid:
                print(f"‚úì Autenticaci√≥n exitosa. UID: {uid}")
            else:
                print("‚úó Autenticaci√≥n fallida. Credenciales incorrectas o base de datos no existe.")
                return False
        except Exception as e:
            print(f"‚úó Error en autenticaci√≥n: {e}")
            return False
        
        # Paso 4: Conectar al servicio object
        print("\n4. CONECTANDO AL SERVICIO OBJECT...")
        try:
            models = xmlrpc.client.ServerProxy(f'{odoo_url}/xmlrpc/2/object')
            print("‚úì Conexi√≥n al servicio object establecida")
        except Exception as e:
            print(f"‚úó Error conectando al servicio object: {e}")
            return False
        
        # Paso 5: Probar acceso a modelos
        print("\n5. PROBANDO ACCESO A MODELOS...")
        
        # Probar acceso a product.template
        try:
            print("\n5.1. Probando acceso a product.template...")
            product_count = models.execute_kw(
                odoo_db, uid, odoo_password,
                'product.template', 'search_count', [[]]
            )
            print(f"‚úì N√∫mero de productos en product.template: {product_count}")
            
            if product_count > 0:
                # Obtener algunos productos
                product_ids = models.execute_kw(
                    odoo_db, uid, odoo_password,
                    'product.template', 'search', [[]],
                    {'limit': 5}
                )
                print(f"‚úì IDs de primeros 5 productos: {product_ids}")
                
                # Leer datos de productos
                products = models.execute_kw(
                    odoo_db, uid, odoo_password,
                    'product.template', 'read', [product_ids],
                    {'fields': ['id', 'name', 'default_code', 'list_price']}
                )
                print(f"‚úì Datos de productos obtenidos:")
                for product in products:
                    print(f"  - ID: {product['id']}, Nombre: {product['name']}, C√≥digo: {product.get('default_code', 'N/A')}, Precio: {product.get('list_price', 0)}")
            else:
                print("‚ö† No hay productos en la base de datos")
                
        except Exception as e:
            print(f"‚úó Error accediendo a product.template: {e}")
            print(f"Traceback: {traceback.format_exc()}")
        
        # Probar acceso a res.partner (proveedores)
        try:
            print("\n5.2. Probando acceso a res.partner (proveedores)...")
            partner_count = models.execute_kw(
                odoo_db, uid, odoo_password,
                'res.partner', 'search_count', 
                [['&', ('is_company', '=', True), ('supplier_rank', '>', 0)]]
            )
            print(f"‚úì N√∫mero de proveedores: {partner_count}")
            
        except Exception as e:
            print(f"‚úó Error accediendo a res.partner: {e}")
        
        # Probar acceso a product.category
        try:
            print("\n5.3. Probando acceso a product.category...")
            category_count = models.execute_kw(
                odoo_db, uid, odoo_password,
                'product.category', 'search_count', [[]]
            )
            print(f"‚úì N√∫mero de categor√≠as: {category_count}")
            
        except Exception as e:
            print(f"‚úó Error accediendo a product.category: {e}")
        
        print("\n" + "="*60)
        print("‚úì COMUNICACI√ìN XML-RPC CON ODOO VERIFICADA EXITOSAMENTE")
        print("‚úì La API FastAPI DEBER√çA poder conectarse a Odoo")
        return True
        
    except Exception as e:
        print(f"\n‚úó ERROR GENERAL: {e}")
        print(f"Traceback completo: {traceback.format_exc()}")
        return False

def test_odoo_availability():
    """Prueba si Odoo est√° disponible en el puerto especificado"""
    import urllib.request
    import urllib.error
    
    print("\n=== VERIFICANDO DISPONIBILIDAD DE ODOO ===")
    
    try:
        response = urllib.request.urlopen("http://localhost:8070", timeout=10)
        print(f"‚úì Odoo responde en http://localhost:8070")
        print(f"‚úì C√≥digo de respuesta: {response.getcode()}")
        return True
    except urllib.error.URLError as e:
        print(f"‚úó Odoo no est√° disponible en http://localhost:8070: {e}")
        return False
    except Exception as e:
        print(f"‚úó Error verificando disponibilidad: {e}")
        return False

if __name__ == "__main__":
    print("Iniciando verificaci√≥n de comunicaci√≥n XML-RPC con Odoo...\n")
    
    # Primero verificar si Odoo est√° disponible
    if not test_odoo_availability():
        print("\n‚ùå Odoo no est√° disponible. Verifica que est√© ejecut√°ndose.")
        sys.exit(1)
    
    # Luego probar la comunicaci√≥n XML-RPC
    if test_odoo_xmlrpc():
        print("\nüéâ RESULTADO: La comunicaci√≥n XML-RPC funciona correctamente")
        print("üîç Si la API FastAPI usa datos de fallback, el problema puede ser:")
        print("   - Configuraci√≥n incorrecta en variables de entorno")
        print("   - Manejo de excepciones que oculta errores")
        print("   - Problemas de red dentro del contenedor Docker")
        sys.exit(0)
    else:
        print("\n‚ùå RESULTADO: La comunicaci√≥n XML-RPC fall√≥")
        print("üîç Verifica:")
        print("   - Que Odoo est√© ejecut√°ndose")
        print("   - Las credenciales de acceso")
        print("   - La configuraci√≥n de la base de datos")
        sys.exit(1)