#!/usr/bin/env python3
import xmlrpc.client
import os

def test_odoo_connection():
    """Prueba la conexi√≥n real con Odoo y verifica los datos"""
    
    # Configuraci√≥n de Odoo
    odoo_config = {
        "url": os.getenv("ODOO_URL", "http://localhost:8070"),
        "db": os.getenv("ODOO_DB", "manus_odoo-bd"),
        "username": os.getenv("ODOO_USERNAME", "yo@mail.com"),
        "password": os.getenv("ODOO_PASSWORD", "admin")
    }
    
    print("üîç DIAGN√ìSTICO DE CONEXI√ìN CON ODOO")
    print("="*50)
    print(f"URL: {odoo_config['url']}")
    print(f"Base de datos: {odoo_config['db']}")
    print(f"Usuario: {odoo_config['username']}")
    print(f"Contrase√±a: {'*' * len(odoo_config['password'])}")
    print()
    
    try:
        # Paso 1: Conectar al servicio com√∫n
        print("üì° Paso 1: Conectando al servicio com√∫n...")
        common = xmlrpc.client.ServerProxy(f'{odoo_config["url"]}/xmlrpc/2/common')
        
        # Verificar versi√≥n de Odoo
        print("üîç Verificando versi√≥n de Odoo...")
        version_info = common.version()
        print(f"‚úÖ Versi√≥n de Odoo: {version_info}")
        print()
        
        # Paso 2: Autenticaci√≥n
        print("üîê Paso 2: Autenticando usuario...")
        uid = common.authenticate(
            odoo_config["db"],
            odoo_config["username"],
            odoo_config["password"],
            {}
        )
        
        if not uid:
            print("‚ùå ERROR: Autenticaci√≥n fallida")
            print("üí° Posibles causas:")
            print("   - Usuario o contrase√±a incorrectos")
            print("   - Base de datos no existe")
            print("   - Usuario no tiene permisos")
            return False
        
        print(f"‚úÖ Autenticaci√≥n exitosa. UID: {uid}")
        print()
        
        # Paso 3: Conectar al servicio de objetos
        print("üìä Paso 3: Conectando al servicio de objetos...")
        models = xmlrpc.client.ServerProxy(f'{odoo_config["url"]}/xmlrpc/2/object')
        
        # Paso 4: Verificar acceso a productos
        print("üì¶ Paso 4: Verificando productos en Odoo...")
        
        # Contar productos totales
        product_count = models.execute_kw(
            odoo_config["db"],
            uid,
            odoo_config["password"],
            'product.template',
            'search_count',
            [[]]
        )
        
        print(f"üìä Total de productos en Odoo: {product_count}")
        
        if product_count == 0:
            print("‚ö†Ô∏è  WARNING: No hay productos en la base de datos de Odoo")
            print("üí° Esto explica por qu√© se muestran datos simulados")
            print()
            
            # Verificar si hay categor√≠as
            category_count = models.execute_kw(
                odoo_config["db"],
                uid,
                odoo_config["password"],
                'product.category',
                'search_count',
                [[]]
            )
            print(f"üìÇ Total de categor√≠as: {category_count}")
            
            # Verificar si hay partners/proveedores
            partner_count = models.execute_kw(
                odoo_config["db"],
                uid,
                odoo_config["password"],
                'res.partner',
                'search_count',
                [[]]
            )
            print(f"üë• Total de partners: {partner_count}")
            
            return False
        
        # Obtener algunos productos de muestra
        print("üìã Obteniendo productos de muestra...")
        product_ids = models.execute_kw(
            odoo_config["db"],
            uid,
            odoo_config["password"],
            'product.template',
            'search',
            [[]],
            {'limit': 5}
        )
        
        if product_ids:
            products = models.execute_kw(
                odoo_config["db"],
                uid,
                odoo_config["password"],
                'product.template',
                'read',
                [product_ids],
                {'fields': ['id', 'name', 'default_code', 'list_price', 'categ_id']}
            )
            
            print("\nüéØ PRODUCTOS REALES ENCONTRADOS:")
            print("-" * 40)
            for product in products:
                print(f"ID: {product['id']}")
                print(f"Nombre: {product['name']}")
                print(f"C√≥digo: {product.get('default_code', 'Sin c√≥digo')}")
                print(f"Precio: {product.get('list_price', 0)}")
                print(f"Categor√≠a ID: {product.get('categ_id', 'Sin categor√≠a')}")
                print("-" * 40)
        
        print("\n‚úÖ CONEXI√ìN CON ODOO EXITOSA")
        print("‚úÖ HAY PRODUCTOS REALES EN LA BASE DE DATOS")
        return True
        
    except xmlrpc.client.Fault as e:
        print(f"‚ùå Error XML-RPC: {e}")
        return False
    except ConnectionError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("üí° Verifica que Odoo est√© ejecut√°ndose en el puerto correcto")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def main():
    print("üß™ DIAGN√ìSTICO DE DATOS REALES VS SIMULADOS")
    print("="*60)
    
    success = test_odoo_connection()
    
    print("\n" + "="*60)
    if success:
        print("üéâ ¬°HAY DATOS REALES EN ODOO!")
        print("üîç El problema debe estar en el c√≥digo del servicio")
        print("üí° Revisar por qu√© se est√°n usando datos fallback")
    else:
        print("‚ùå NO HAY DATOS REALES EN ODOO")
        print("üí° Por eso se muestran los datos simulados")
        print("üîß Necesitas importar productos reales a Odoo")
    print("="*60)

if __name__ == "__main__":
    main()